#! /usr/bin/env sh

set -e # errexit
source "$(dirname "$0")/helpers"

# Help text
function helpTxt {
	heading 'NAME'
	body "git-new-branch - Create a new branch based on the remote's latest HEAD"

	heading 'SYNOPSIS'
	body "git new-branch <branch-name> [<remote>]"

	heading 'DESCRIPTION'
	body "Create a new branch with <branch-name> based on the remote's HEAD. If
	<remote> is provided, it will use the primary branch for that remote instead
	of the primary remote. Otherwise, it will first check the repository's
	configuration for the primary remote, and if not found, use the first remote
	assiciated with the repository. To change the primary remote, use git-refesh
	-s <remote>."

	heading 'OPTIONS'
	option '-s' '(stash) Automatically stash uncommitted changes before checking
	out the branch and pop after'
	option '-q' '(quiet) Supress writing to stdout. Overrides .gitconfig
		options funcs.verbose and funcs.refresh.verbose.'
	option '-v' '(verbose) Print additional information'
	option '-h' '(help) Print this help'

	echo "\n"
}

case "$1" in
	"help"|"-help"|"--help")
		helpTxt
		exit 0
		;;
esac

s=0 q=0 v=0
while getopts ":hsqv" opt; do
	case $opt in
		h) helpTxt; exit 0 ;;
		s) s=0 ;;
		q) q=1 v=0; ;;
		v) v=1 ;;
		\?)
			echo >&2 "Unknown option -$OPTARG. Run git new-branch -h for help."
			exit 1
			;;
	esac
done
shift $(expr $OPTIND - 1)

[ $q -eq 1 ] && v=0 || {
	[ $v -eq 1 ] || configValueOn -o -q "verbose" "co-primary" && v=1
}

branch=$1
if [ -z "$branch" ]; then
	echo >&2 "git new-branch requires 1 argument <new branch name>"
	exit 1
fi

remote=$2
remote=${remote:-$(git primary)}
if [ -z "$remote" ]; then
	echo >&2 "this repository has no remote set"
	exit 1
fi

# redirect output of the next block
[ $v -eq 1 ] && exec 4>&1 || exec 4>/dev/null
{
	# Check for uncommitted changes
	# if git diff-index --quiet HEAD; then dirty=1; else dirty=0; fi
  modified=$(git status --porcelain -uno | wc -l)
	if [ $modified -gt 0 -a $s -eq 0 ]; then
		echo >&2 'There are uncommitted changes. Commit or stash them, or use `-s`' \
			'to stash them automatically.'
    exit 1
	fi
	if [ $modified -gt 0 ]; then git stash push; fi
	git co-primary
	git checkout -b $branch
	if [ $modified -gt 0 ]; then git stash pop; fi
} >&4

